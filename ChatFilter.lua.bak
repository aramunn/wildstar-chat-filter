local ChatFilter = {}

local addonChatLog
local nId

local function clone(t) -- deep-copy a table
  if type(t) ~= "table" then return t end
  local meta = getmetatable(t)
  local target = {}
  for k, v in pairs(t) do
    if type(v) == "table" then
      target[k] = clone(v)
    else
      target[k] = v
    end
  end
  setmetatable(target, meta)
  return target
end

local knMaxMsgLength = 200

local ktWhiteList = {
  "T3",
  "SW",
  "Scorchwing",
  "Mecha",
  "Garg",
  "Gargantua",
  "MMP",
  "KP",
  "Grend",
  "Kraggor",
  "GA",
  "DS",
  "WB",
  "Matuk",
  "Kundar",
  "Frostgale",
  "GotG",
  "Grove",
}

function ChatFilter:GoodMessage(channelCurrent, tMessage)
  local tQueuedMessage = {}
  tQueuedMessage.tMessage = clone(tMessage)
  tQueuedMessage.eChannelType = channelCurrent:GetType()
  tQueuedMessage.strChannelName = channelCurrent:GetName() --.." (filtered)"
  tQueuedMessage.strChannelCommand = channelCurrent:GetCommand()
  tQueuedMessage.idChannel = channelCurrent:GetUniqueId()
  tQueuedMessage.tMessage.arMessageSegments[1].strText = tQueuedMessage.tMessage.arMessageSegments[1].strText --.." (DEBUG)"
  -- tQueuedMessage.eChannelType = ChatSystemLib.ChatChannel_Trade
  tQueuedMessage.idChannel = nId
  addonChatLog:HelperGenerateChatMessage(tQueuedMessage)
  addonChatLog:HelperQueueMessage(tQueuedMessage)
  -- Print("Nexus: "..strMessage)
  -- message = string.lower(string.gsub(message, " ", ""))
  -- if message == "x" then
    -- self.state.listItems.needRolls[tMessage.strSender] = "x"
  -- end
end

function ChatFilter:OnChatMessage(channelCurrent, tMessage)
	if channelCurrent:GetType() ~= ChatSystemLib.ChatChannel_Nexus then return end
  local strMessage = string.lower(tostring(tMessage.arMessageSegments[1].strText))
  if string.len(strMessage) > knMaxMsgLength then return end
  for idx, strGood in ipairs(ktWhiteList) do
    if string.find(strMessage, "%W"..string.lower(strGood).."%W") or
       string.find(strMessage, "^"..string.lower(strGood).."%W") or
       string.find(strMessage, "%W"..string.lower(strGood).."$") or
       string.find(strMessage, "^"..string.lower(strGood).."$")
    then
      self:GoodMessage(channelCurrent, tMessage)
      -- Print("(passed because it matched "..strGood)
      return
    end
  end
end

-- function ChatFilter:CreateCustomChannel(strChannelName)
  -- for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    -- if channelCurrent:GetType() == ChatSystemLib.ChatChannel_Custom then
      -- if channelCurrent:GetName() == strChannelName then return end
    -- end
  -- end
  -- ChatSystemLib.JoinChannel(strChannelName)
-- end

function ChatFilter:Test()
  addonChatLog = Apollo.GetAddon("ChatLog")
  -- self:CreateCustomChannel("NexusForViaAramunn")
  -- ChatSystemLib.PostOnChannel
  -- ChatSystemLib.JoinChannel("")
  for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    local eChannelType = channelCurrent:GetType()
    if eChannelType == ChatSystemLib.ChatChannel_Realm then
      Print("Found "..tostring(channelCurrent:GetName()))
      nId = channelCurrent:GetUniqueId()
    end
    -- Print(tostring(eChannelType))
    -- for strName, eType in pairs(ChatSystemLib) do
      -- if string.find(strName, "ChatChannel_") then
        -- if eType == eChannelType then Print(tostring(strName)) end
      -- end
    -- end
  end
  Apollo.RegisterEventHandler("ChatMessage",	"OnChatMessage", self)
end

function ChatFilter:InitTestStuff()
  -- Apollo.RegisterSlashCommand("test", "Test", self)
  self:Test()
end

--------------------------------------
-- stuff to keep ---------------------
--------------------------------------

function ChatFilter:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

function ChatFilter:Init()
  Apollo.RegisterAddon(self)
end

function ChatFilter:OnLoad()
  Apollo.RegisterSlashCommand("pt", "DisplayTable", self)
  Apollo.RegisterSlashCommand("visitnext", "VisitNext", self)
  self:InitTestStuff()
end

local ChatFilterInst = ChatFilter:new()
ChatFilterInst:Init()













local Tester = {}

local addonChatLog
local nId

local function clone (t) -- deep-copy a table
  if type(t) ~= "table" then return t end
  local meta = getmetatable(t)
  local target = {}
  for k, v in pairs(t) do
    if type(v) == "table" then
      target[k] = clone(v)
    else
      target[k] = v
    end
  end
  setmetatable(target, meta)
  return target
end

local knMaxMsgLength = 200

local ktWhiteList = {
  "T3",
  "SW",
  "Scorchwing",
  "Mecha",
  "Garg",
  "Gargantua",
  "DS",
  "Dreamspore",
  "KHG",
  "King Honey Grave",
  "Metal Maw",
  "MM",
  "Zoe",
  "Zoetic",
  "MMP",
  "KP",
  "Grend",
  "Kraggor",
  "GA",
  "DS",
  "RMT",
  "WB",
  "Matuk",
  "Kundar",
  "Frostgale",
  "GotG",
  "Grove",
  "Dungeon",
  "Veteran",
  "Vet",
  "Vets",
  "Fungeon",
}

function Tester:GoodMessage(channelCurrent, tMessage)
  local tQueuedMessage = {}
  tQueuedMessage.tMessage = clone(tMessage)
  tQueuedMessage.eChannelType = channelCurrent:GetType()
  tQueuedMessage.strChannelName = channelCurrent:GetName() --.." (filtered)"
  tQueuedMessage.strChannelCommand = channelCurrent:GetCommand()
  tQueuedMessage.idChannel = channelCurrent:GetUniqueId()
  tQueuedMessage.tMessage.arMessageSegments[1].strText = tQueuedMessage.tMessage.arMessageSegments[1].strText --.." (DEBUG)"
  -- tQueuedMessage.eChannelType = ChatSystemLib.ChatChannel_Trade
  tQueuedMessage.idChannel = nId
  addonChatLog:HelperGenerateChatMessage(tQueuedMessage)
  addonChatLog:HelperQueueMessage(tQueuedMessage)
  -- Print("Nexus: "..strMessage)
  -- message = string.lower(string.gsub(message, " ", ""))
  -- if message == "x" then
    -- self.state.listItems.needRolls[tMessage.strSender] = "x"
  -- end
end

function Tester:IsGoodMessage(strMessage)
  for c in string.gmatch(strMessage, ".") do
    
  end
end

function Tester:OnChatMessage(channelCurrent, tMessage)
	-- if channelCurrent:GetType() ~= ChatSystemLib.ChatChannel_Nexus then return end
	if channelCurrent:GetType() ~= ChatSystemLib.ChatChannel_Say then return end
  local strMessage = string.lower(tostring(tMessage.arMessageSegments[1].strText))
  if string.len(strMessage) > knMaxMsgLength then return end
  
  if self:IsGoodMessage(strMessage) then
    self:GoodMessage(channelCurrent, tMessage)
    return
  else
    return
  end
  
  for idx, strGood in ipairs(ktWhiteList) do
    if string.find(strMessage, "%W"..string.lower(strGood).."%W") or
       string.find(strMessage, "^"..string.lower(strGood).."%W") or
       string.find(strMessage, "%W"..string.lower(strGood).."$") or
       string.find(strMessage, "^"..string.lower(strGood).."$")
    then
      self:GoodMessage(channelCurrent, tMessage)
      -- Print("(passed because it matched "..strGood)
      return
    end
  end
end

-- function Tester:CreateCustomChannel(strChannelName)
  -- for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    -- if channelCurrent:GetType() == ChatSystemLib.ChatChannel_Custom then
      -- if channelCurrent:GetName() == strChannelName then return end
    -- end
  -- end
  -- ChatSystemLib.JoinChannel(strChannelName)
-- end

function Tester:SetupChatFilter()
  addonChatLog = Apollo.GetAddon("ChatLog")
  -- self:CreateCustomChannel("NexusForViaAramunn")
  -- ChatSystemLib.PostOnChannel
  -- ChatSystemLib.JoinChannel("")
  for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    local eChannelType = channelCurrent:GetType()
    if eChannelType == ChatSystemLib.ChatChannel_Realm then
      Print("Found "..tostring(channelCurrent:GetName()))
      nId = channelCurrent:GetUniqueId()
    end
    -- Print(tostring(eChannelType))
    -- for strName, eType in pairs(ChatSystemLib) do
      -- if string.find(strName, "ChatChannel_") then
        -- if eType == eChannelType then Print(tostring(strName)) end
      -- end
    -- end
  end
  Apollo.RegisterEventHandler("ChatMessage",	"OnChatMessage", self)
end

function Tester:InitTestStuff()
  Apollo.RegisterSlashCommand("test", "Test", self)
  self:SetupChatFilter()
end

local function searchTable(t,s,l)
  if l > 2 then return end
  for k,v in pairs(_G) do
    local y = type(v)
    if y == "function" then
      local n = tostring(k)
      if n == s then Print(n) end
    elseif y == "table" then
      searchTable(v,s,l+1)
    end
  end
end

function Tester:Test(strCmd, strParams)
  -- local addon = Apollo.GetAddon("MyChallenges")
  -- self:PrintTable(addon, 0, true)
  -- local addons = Apollo.GetAddons()
  -- self:PrintTable(addons, 0, true)
  
  -- searchTable(_G,"OnToggleShowChallenges",0)
  searchTable(_G,"OnObjectiveTrackerLoaded",0)
  Print("done")
end

-- function meta.__pairs(t)
  -- return next, t, nil
-- end

--------------------------------------
-- stuff to keep ---------------------
--------------------------------------

function Tester:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

function Tester:Init()
  Apollo.RegisterAddon(self)
end

function Tester:OnLoad()
  Apollo.RegisterSlashCommand("visitnext", "VisitNext", self)
  Apollo.RegisterSlashCommand("pt", "ParseTable", self)
  Apollo.RegisterSlashCommand("ia", "InspectAddon", self)
  self:InitTestStuff()
end

function Tester:VisitNext()
  local arrHouses = {
    {
      charName = "Via",
      houseName = "City Stadium",
    },
    {
      charName = "Cognus",
      houseName = "Mithral Hall",
    },
    {
      charName = "Kinnal",
      houseName = "Fjadrargljufur",
    },
    {
      charName = "Uri",
      houseName = "Doom Hovel",
    },
    {
      charName = "Denahi",
      houseName = "That Place",
    },
    {
      charName = "Zannah",
      houseName = "Ruusan",
    },
  }
  local usrResidence = HousingLib.GetResidence()
  local usrProperty = usrResidence and usrResidence:GetPropertyName() or nil
  for idx, tData in ipairs(arrHouses) do
    if usrProperty == tData.houseName then
      local strName = arrHouses[idx%#arrHouses+1].charName.." Aramunn"
      if strName == GameLib.GetPlayerUnit():GetName() then
        Print("Ya duhn. Go home.")
      else
        HousingLib.RequestVisitPlayer(strName)
      end
    end
  end
end

function Tester:OnSave(eLevel)
  if eLevel == GameLib.CodeEnumAddonSaveLevel.General then
    return {}
  end
end

function Tester:ParseTable(strCmd, strParams)
  local tData = _G
  local strTable, strFilter = string.match(strParams, "([^ ]*) (.*)")
  strTable = strTable or strParams
  for strVar in string.gmatch(strTable, "[^\.]+") do
    tData = tData[strVar]
    if not tData then
      Print("Not found")
      return
    end
  end
  Print("["..tostring(strTable).."] = \""..tostring(tData).."\"")
  self:PrintTable(tData, 1, strFilter == nil, strFilter)
end

function Tester:PrintTable(tData, nIndent, bDrillDown, strKeyFilter)
  strKeyFilter = strKeyFilter and string.lower(strKeyFilter)
  for key, value in pairs(tData) do
    local strKey = string.lower(tostring(key))
    if (not strKeyFilter or string.match(strKey, strKeyFilter)) then
      Print(string.rep(">", nIndent).."["..tostring(key).."] = \""..tostring(value).."\"")
      if (bDrillDown and type(value) == "table") then
        self:PrintTable(value, nIndent + 1, bDrillDown, strKeyFilter)
      end
    end
  end
end

local TesterInst = Tester:new()
TesterInst:Init()








local Tester = {}

local addonChatLog
local nId

local function clone (t) -- deep-copy a table
  if type(t) ~= "table" then return t end
  local meta = getmetatable(t)
  local target = {}
  for k, v in pairs(t) do
    if type(v) == "table" then
      target[k] = clone(v)
    else
      target[k] = v
    end
  end
  setmetatable(target, meta)
  return target
end

local knMaxMsgLength = 200

local ktWhiteList = {
  "T3",
  "SW",
  "Scorchwing",
  "Mecha",
  "Garg",
  "Gargantua",
  "DS",
  "Dreamspore",
  "KHG",
  "King Honey Grave",
  "Metal Maw",
  "MM",
  "Zoe",
  "Zoetic",
  "MMP",
  "KP",
  "Grend",
  "Kraggar",
  "GA",
  "DS",
  "RMT",
  "WB",
  "Matuk",
  "Kundar",
  "Frostgale",
  "GotG",
  "Grove",
  "Dungeon",
  "Veteran",
  "Vet",
  "Vets",
  "Fungeon",
}

function Tester:GoodMessage(channelCurrent, tMessage)
  local tQueuedMessage = {}
  tQueuedMessage.tMessage = clone(tMessage)
  tQueuedMessage.eChannelType = channelCurrent:GetType()
  tQueuedMessage.strChannelName = channelCurrent:GetName() --.." (filtered)"
  tQueuedMessage.strChannelCommand = channelCurrent:GetCommand()
  tQueuedMessage.idChannel = channelCurrent:GetUniqueId()
  tQueuedMessage.tMessage.arMessageSegments[1].strText = tQueuedMessage.tMessage.arMessageSegments[1].strText --.." (DEBUG)"
  -- tQueuedMessage.eChannelType = ChatSystemLib.ChatChannel_Trade
  tQueuedMessage.idChannel = nId
  addonChatLog:HelperGenerateChatMessage(tQueuedMessage)
  addonChatLog:HelperQueueMessage(tQueuedMessage)
  -- Print("Nexus: "..strMessage)
  -- message = string.lower(string.gsub(message, " ", ""))
  -- if message == "x" then
    -- self.state.listItems.needRolls[tMessage.strSender] = "x"
  -- end
end

local tSearch = {}

function Tester:MakeTable()
  for idx, strGood in ipairs(ktWhiteList) do
    local strToAdd = strGood:lower()
    local tPath = tSearch
    for c in strToAdd:gmatch(".") do
      tPath[c] = tPath[c] or {}
      tPath = tPath[c]
    end
    tPath.isMatch = true
  end
  -- self:PrintTable(tSearch, 0, true)
end

function Tester:SplitString(strIn, inSplitPattern)
  local outResults = {}
  local theStart = 1
  local theSplitStart, theSplitEnd = string.find( strIn, inSplitPattern, theStart )
  while theSplitStart do
    -- Print(tostring(theSplitStart))
    table.insert( outResults, string.sub( strIn, theStart, theSplitStart-1 ) )
    theStart = theSplitEnd + 1
    theSplitStart, theSplitEnd = string.find( strIn, inSplitPattern, theStart )
  end
  table.insert( outResults, string.sub( strIn, theStart ) )
  return outResults
end

function Tester:IsInSearch(strWord)
  local tPath = tSearch
  for c in strWord:gmatch(".") do
    -- Print("checking: "..c)
    if not tPath[c] then return false end
    tPath = tPath[c]
    -- Print(c.." is good")
  end
  -- Print("result: "..tostring(tPath.isMatch))
  if tPath.isMatch then return true end
end

--ignore punctuation

function Tester:IsGoodMessage(strMessage)
  for idx,strWord in ipairs(self:SplitString(strMessage, "%s+")) do
    -- Print("word: "..strWord)
    if self:IsInSearch(strWord) then return true end
  end
  return false
end

function Tester:OnChatMessage(channelCurrent, tMessage)
	if channelCurrent:GetType() ~= ChatSystemLib.ChatChannel_Nexus then return end
	-- if channelCurrent:GetType() ~= ChatSystemLib.ChatChannel_Say then return end
  local strMessage = string.lower(tostring(tMessage.arMessageSegments[1].strText))
  if string.len(strMessage) > knMaxMsgLength then return end
  
  if self:IsGoodMessage(strMessage) then
    -- Print("Good! "..strMessage)
    self:GoodMessage(channelCurrent, tMessage)
    return
  else
    -- Print("Not good :(")
    return
  end
  
  for idx, strGood in ipairs(ktWhiteList) do
    if string.find(strMessage, "%W"..string.lower(strGood).."%W") or
       string.find(strMessage, "^"..string.lower(strGood).."%W") or
       string.find(strMessage, "%W"..string.lower(strGood).."$") or
       string.find(strMessage, "^"..string.lower(strGood).."$")
    then
      self:GoodMessage(channelCurrent, tMessage)
      -- Print("(passed because it matched "..strGood)
      return
    end
  end
end

-- function Tester:CreateCustomChannel(strChannelName)
  -- for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    -- if channelCurrent:GetType() == ChatSystemLib.ChatChannel_Custom then
      -- if channelCurrent:GetName() == strChannelName then return end
    -- end
  -- end
  -- ChatSystemLib.JoinChannel(strChannelName)
-- end

function Tester:SetupChatFilter()
  addonChatLog = Apollo.GetAddon("ChatLog")
  -- self:CreateCustomChannel("NexusForViaAramunn")
  -- ChatSystemLib.PostOnChannel
  -- ChatSystemLib.JoinChannel("")
  for idx, channelCurrent in ipairs(ChatSystemLib.GetChannels()) do
    local eChannelType = channelCurrent:GetType()
    if eChannelType == ChatSystemLib.ChatChannel_Realm then
      Print("Found "..tostring(channelCurrent:GetName()))
      nId = channelCurrent:GetUniqueId()
    end
    -- Print(tostring(eChannelType))
    -- for strName, eType in pairs(ChatSystemLib) do
      -- if string.find(strName, "ChatChannel_") then
        -- if eType == eChannelType then Print(tostring(strName)) end
      -- end
    -- end
  end
  Apollo.RegisterEventHandler("ChatMessage",	"OnChatMessage", self)
end

function Tester:InitTestStuff()
  Apollo.RegisterSlashCommand("test", "Test", self)
  self:SetupChatFilter()
end

local function searchTable(t,s,l)
  if l > 2 then return end
  for k,v in pairs(_G) do
    local y = type(v)
    if y == "function" then
      local n = tostring(k)
      if n == s then Print(n) end
    elseif y == "table" then
      searchTable(v,s,l+1)
    end
  end
end

function Tester:Test(strCmd, strParams)
  -- local addon = Apollo.GetAddon("MyChallenges")
  -- self:PrintTable(addon, 0, true)
  -- local addons = Apollo.GetAddons()
  -- self:PrintTable(addons, 0, true)
  
  -- searchTable(_G,"OnToggleShowChallenges",0)
  -- searchTable(_G,"OnObjectiveTrackerLoaded",0)
  -- Print("done")
  
  self:MakeTable()
end

-- function meta.__pairs(t)
  -- return next, t, nil
-- end

--------------------------------------
-- stuff to keep ---------------------
--------------------------------------

function Tester:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

function Tester:Init()
  Apollo.RegisterAddon(self)
end

function Tester:OnLoad()
  Apollo.RegisterSlashCommand("visitnext", "VisitNext", self)
  Apollo.RegisterSlashCommand("pt", "ParseTable", self)
  Apollo.RegisterSlashCommand("ia", "InspectAddon", self)
  self:InitTestStuff()
end

function Tester:VisitNext()
  local arrHouses = {
    {
      charName = "Via",
      houseName = "City Stadium",
    },
    {
      charName = "Cognus",
      houseName = "Mithral Hall",
    },
    {
      charName = "Kinnal",
      houseName = "Fjadrargljufur",
    },
    {
      charName = "Uri",
      houseName = "Doom Hovel",
    },
    {
      charName = "Denahi",
      houseName = "That Place",
    },
    {
      charName = "Zannah",
      houseName = "Ruusan",
    },
  }
  local usrResidence = HousingLib.GetResidence()
  local usrProperty = usrResidence and usrResidence:GetPropertyName() or nil
  for idx, tData in ipairs(arrHouses) do
    if usrProperty == tData.houseName then
      local strName = arrHouses[idx%#arrHouses+1].charName.." Aramunn"
      if strName == GameLib.GetPlayerUnit():GetName() then
        Print("Ya duhn. Go home.")
      else
        HousingLib.RequestVisitPlayer(strName)
      end
    end
  end
end

function Tester:OnSave(eLevel)
  if eLevel == GameLib.CodeEnumAddonSaveLevel.General then
    return {}
  end
end

function Tester:ParseTable(strCmd, strParams)
  local tData = _G
  local strTable, strFilter = string.match(strParams, "([^ ]*) (.*)")
  strTable = strTable or strParams
  for strVar in string.gmatch(strTable, "[^\.]+") do
    tData = tData[strVar]
    if not tData then
      Print("Not found")
      return
    end
  end
  Print("["..tostring(strTable).."] = \""..tostring(tData).."\"")
  self:PrintTable(tData, 1, strFilter == nil, strFilter)
end

function Tester:PrintTable(tData, nIndent, bDrillDown, strKeyFilter)
  strKeyFilter = strKeyFilter and string.lower(strKeyFilter)
  for key, value in pairs(tData) do
    local strKey = string.lower(tostring(key))
    if (not strKeyFilter or string.match(strKey, strKeyFilter)) then
      Print(string.rep(">", nIndent).."["..tostring(key).."] = \""..tostring(value).."\"")
      if (bDrillDown and type(value) == "table") then
        self:PrintTable(value, nIndent + 1, bDrillDown, strKeyFilter)
      end
    end
  end
end

local TesterInst = Tester:new()
TesterInst:Init()
